<?php
// $Id$

/**
 * @file
 * Stores and displays a trail of previously visited pages.
 *
 * In this version, we add a page to hook_menu() to demonstrate why you might
 * want to use a dynamic query.
 *
 * Learn more about the Database API here: http://drupal.org/node/310069
 */


/**
 * Implements hook_init().
 */
function trails_init() {
  // Add an item to the current user's history.
  trails_history_add();
}


/**
 * Implements hook_permission().
 */
function trails_permission() {
  return array(
    'administer trails' => array(
      'title' => t('Administer Trails module'),
      'description' => t('Perform administration tasks for Trails module.'),
    ),
    'access trails blocks' => array(
      'title' => t('Access Trails blocks'),
      'description' => t('View blocks generated by the Trails module.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function trails_menu() {
  // Module settings.
  $items['admin/config/trails'] = array(
    'title' => 'Trails',
    'description' => 'trails configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trails_admin_settings'),
    'access arguments' => array('administer trails'),
    'file' => 'trails.admin.inc',
    'file path' => drupal_get_path('module', 'trails'),
  );
  // Demo of dynamic query.
  $items['trails/history'] = array(
    'title' => 'Trail page',
    'description' => 'A full, paginated list of pages visited.',
    'page callback' => 'trails_history_page',
    'access arguments' => array('administer trails'),
  );
  return $items;
}



/**
 * Implements hook_block_info().
 */
function trails_block_info() {
  $blocks['history'] = array(
    'info' => t('History'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_configure().
 */
function trails_block_configure($delta = '') {
  // Get the maximum allowed value from the configuration form.
  $max_to_display = variable_get('trails_block_max', 50);

  // Add a select box of numbers form 1 to $max_to_display.
  $form['trails_block_num'] = array(
    '#type' => 'select',
    '#title' => t('Number of items to show'),
    '#default_value' => variable_get('trails_block_num', '5'),
    '#options' => drupal_map_assoc(range(1, $max_to_display)),
  );
  return $form;
}


/**
 * Implements hook_block_save().
 */
function trails_block_save($delta = '', $edit = array()) {
  variable_set('trails_block_num', $edit['trails_block_num']);
}


/**
 * Implements hook_block_view().
 */
function trails_block_view($delta = '') {
  if (user_access('access trails blocks')) {
    $block = array();
    $output = ''; // Added this after video was recorded.
    switch ($delta) { // Switched this to $delta after video was recorded.
      case 'history':
        // Create list of previous paths.

        // Grab the number of items to display
        $num_items = variable_get('trails_block_num', '5');

        $trail = trails_history_fetch($num_items);

        // Output the latest items as a list
        foreach ($trail as $item) {
          $output .= '<li>' . l($item->title, $item->path) . ' - ' . format_interval(REQUEST_TIME - $item->timestamp) . ' ' . t('ago') . '</li>';
        }
        if (isset($output)) {
          $output = '
            <p>' . t('Below are the last !num pages you have visited.', array('!num' => $num_items)) . '</p>
            <ul>' . $output . '</ul>
          ';
        }

        // Prepare to return the $block variable with subject (title) and content (output).
        $block['subject'] = 'History';
        $block['content'] = $output;
        break;
    }

    return $block;
  }
}



/**
 * Implements hook_cron().
 */
function trails_cron() {
  // Prune the history table of everything older than 30 seconds.
  trails_history_prune(30);
}


/**
 * Adds an entry in the trails_history table.
 */
function trails_history_add() {
  // Get the $user object so we can grab the uid and sid of the current user.
  global $user;

  // In order to use a permanent session for anonymouse users, we
  // must set some value in the $_SESSION global array.
  $_SESSION['trails_track'] = TRUE;

  /* Commented out for comparison's sake
  mysql_query("
    INSERT INTO trails_history SET
      timestamp = " . REQUEST_TIME . ",
      path = " . $_GET['q'] . ",
      title = " . drupal_get_title() . ",
      sid = " . $user->sid . ",
      uid = " . $user->uid
    );
  );
  */

  $thid = db_insert('trails_history')
    ->fields(array(
      'timestamp' => REQUEST_TIME,
      'path' => $_GET['q'],
      'title' => drupal_get_title(),
      'sid' => session_id(),
      'uid' => $user->uid,
    ))
    ->execute();

  return $thid;
}


/**
 * Fetches a certain number of history items and returns an array.
 */
function trails_history_fetch($number = 5) {
  global $user;

  /* Commented out for comparison's sake
  $result = mysql_query("
    SELECT * FROM trails_history
    WHERE uid = " . $user->uid . "
    SORT BY timestamp DESC
    LIMIT 0, " . $number
  );
  while ($row = mysql_fetch_array($result)) {
    $history[] = $row;
  }
  */

  // Static query example
  $result = db_query_range("
    SELECT * FROM {trails_history}
    WHERE uid = :uid
    ORDER BY timestamp DESC", 0, $number, array(':uid' => $user->uid));
  foreach ($result as $row) {
    $history[] = $row;
  }

  return $history;
}


/**
 * Prunes back the history table back based on timestamp. Defaults to 1 month ago.
 */
function trails_history_prune($seconds_ago = 2592000) {

  /* Commented out for comparison's sake
  mysql_query("DELETE FROM trails_history WHERE timestamp < " . $timestamp);
  */

  $num_deleted = db_delete('trails_history')
    ->condition('timestamp', REQUEST_TIME - $seconds_ago, '<')
    ->execute();

  return $num_deleted;
}


/**
 * Displays paginated table list of all pages visited.
 */
function trails_history_page() {

  // Begin building the query.
  $query = db_select('trails_history', 'th')
    ->extend('PagerDefault')
    ->orderBy('timestamp', 'DESC')
    ->fields('th')
    ->limit(10);

  // Get a specific UID or session ID from query string and add
  // a condition to display just those results. Otherwise, all
  // will be displayed.
  $arg = arg(2);
  if (is_numeric($arg)) {
    $query->condition('uid', $arg);
  }
  elseif ($arg != '') {
    $query->condition('sid', $arg);
  }

  // Fetch the result set.
  $result = $query->execute();

  // Loop through each item and add to the $rows array.
  foreach ($result as $row) {
    $color = drupal_substr(MD5($row->sid), 0, 6);
    $rows[] = array(
      '<div style="width:20px;height:20px;float:left;margin-right:10px;background:#' . $color . '"></div>' . $row->sid,
      l($row->title, $row->path),
      format_interval(REQUEST_TIME - $row->timestamp) . ' ' . t('ago'),
    );
  }

  // Headers for theme_table().
  $header = array('Session ID', 'Link', 'Time');

  // Format output.
  $output = theme('table', array('header' => $header, 'rows' => $rows)) . theme('pager');

  return $output;
}